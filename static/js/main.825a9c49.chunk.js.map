{"version":3,"sources":["components/RegistrationForm.module.css","components/RegistrationForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegistrationForm","useState","Data","setData","handleReset","initialValues","firstName","lastName","email","gender","department","password","confirmPassword","acceptedTerms","validationSchema","Yup","shape","required","oneOf","min","onSubmit","values","errors","touched","Container","Row","Col","className","classes","Form","action","method","acceptCharset","Segment","name","type","placeholder","Input","join","component","value","as","Select","autoComplete","htmlFor","Green","onClick","Red","Card","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,MAAQ,gCAAgC,KAAO,+BAA+B,QAAU,kCAAkC,KAAO,+BAA+B,OAAS,iCAAiC,IAAM,8BAA8B,MAAQ,kC,2PC4IzPC,EApIU,WAAO,IAAD,EACHC,mBAAS,MADN,mBACpBC,EADoB,KACdC,EADc,KAOrBC,EAAc,WAChBD,EAAQ,OAGZ,OACI,kBAAC,IAAD,CACIE,cAAe,CACXC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,OAAQ,GACRC,WAAY,GACZC,SAAU,GACVC,gBAAiB,GACjBC,eAAe,GAEnBC,iBAAkBC,MAAaC,MAAM,CACjCV,UAAWS,MAAaE,SAAS,2BACjCV,SAAUQ,MAAaE,SAAS,yBAChCT,MAAOO,MAAaP,MAAM,oBAAoBS,SAAS,qBACvDP,WAAYK,MACPG,MACG,CAAC,WAAY,cAAe,UAAW,SACvC,sBAEHD,SAAS,iCACdR,OAAQM,MAAaE,SAAS,6BAC9BN,SAAUI,MAAaI,IAAI,EAAG,gDAAgDF,SAAS,wBACvFL,gBAAiBG,MACZG,MAAM,CAACH,IAAQ,aAAc,uBAC7BE,SAAS,gCACdJ,cAAeE,MAAWG,MAAM,EAAC,GAAO,yBAE5CE,SArCa,SAACC,GAClBlB,EAAQkB,MAyCH,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACG,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,UAAWC,IAAQC,KAAMC,OAAO,KAAKC,OAAO,OAAOC,cAAc,SACnE,yBAAKL,UAAWC,IAAQK,SACpB,wCAEJ,yBAAKN,UAAU,UACX,2BAAOA,UAAU,QACb,kBAAC,IAAD,CAAOO,KAAK,YAAYC,KAAK,OAAOC,YAAY,aAAaT,UAAW,CAAEL,EAAOhB,WAAaiB,EAAQjB,UAAY,aAAe,GAAKsB,IAAQS,OAAOC,KAAK,OAC1J,kBAAC,IAAD,CAAcJ,KAAK,YAAYK,UAAU,MAAMZ,UAAU,sBAE7D,+BACI,kBAAC,IAAD,CAAOO,KAAK,WAAWC,KAAK,OAAOC,YAAY,YAAYT,UAAW,CAAEL,EAAOf,UAAYgB,EAAQhB,SAAW,aAAe,GAAKqB,IAAQS,OAAOC,KAAK,OACtJ,kBAAC,IAAD,CAAcJ,KAAK,WAAWK,UAAU,MAAMZ,UAAU,uBAGhE,yBAAKA,UAAU,UACX,2BAAOA,UAAU,eACb,yDAAiC,6BACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,KAAK,QAAQK,MAAM,OAAOb,UAAW,CAAEL,EAAOb,QAAUc,EAAQd,OAAS,aAAe,GAAK,IAAI6B,KAAK,OAC3H,4BAAQX,UAAU,QAAlB,QACA,kBAAC,IAAD,CAAOO,KAAK,SAASC,KAAK,QAAQK,MAAM,SAASb,UAAW,CAAEL,EAAOb,QAAUc,EAAQd,OAAS,aAAe,GAAK,QAAQ6B,KAAK,OACjI,4BAAQX,UAAU,QAAlB,UACA,kBAAC,IAAD,CAAcO,KAAK,SAASK,UAAU,MAAMZ,UAAU,sBAE1D,+BACI,kBAAC,IAAD,CAAOO,KAAK,aAAaO,GAAG,SAASd,UAAW,CAAEL,EAAOZ,YAAca,EAAQb,WAAa,aAAe,GAAKkB,IAAQc,QAAQJ,KAAK,MACjI,4BAAQE,MAAM,IAAd,qBACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,eAAd,aACA,4BAAQA,MAAM,WAAd,mBACA,4BAAQA,MAAM,SAAd,UAEJ,kBAAC,IAAD,CAAcN,KAAK,aAAaK,UAAU,MAAMZ,UAAU,uBAGlE,+BACI,kBAAC,IAAD,CAAOO,KAAK,QAAQC,KAAK,QAAQC,YAAY,gBAAgBT,UAAW,CAAEL,EAAOd,OAASe,EAAQf,MAAQ,aAAe,GAAKoB,IAAQS,OAAOC,KAAK,OAClJ,kBAAC,IAAD,CAAcJ,KAAK,QAAQK,UAAU,MAAMZ,UAAU,sBAEzD,yBAAKA,UAAU,UACX,2BAAOA,UAAU,QACb,kBAAC,IAAD,CAAOO,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWO,aAAa,QAAQhB,UAAW,CAAEL,EAAOX,UAAYY,EAAQZ,SAAW,aAAe,GAAKiB,IAAQS,OAAOC,KAAK,OAC9K,kBAAC,IAAD,CAAcJ,KAAK,WAAWK,UAAU,MAAMZ,UAAU,sBAE5D,+BACI,kBAAC,IAAD,CAAOO,KAAK,kBAAkBC,KAAK,WAAWC,YAAY,mBAAmBO,aAAa,QAAQhB,UAAW,CAAEL,EAAOV,iBAAmBW,EAAQX,gBAAkB,aAAe,GAAKgB,IAAQS,OAAOC,KAAK,OAC3M,kBAAC,IAAD,CAAcJ,KAAK,kBAAkBK,UAAU,MAAMZ,UAAU,uBAGvE,yBAAKA,UAAU,QACX,kBAAC,IAAD,CAAOQ,KAAK,WAAWD,KAAK,gBAAgBP,UAAW,CAAC,yBAA2BL,EAAOT,eAAiBU,EAAQV,cAAgB,cAAgB,OACnJ,2BAAO+B,QAAQ,gBAAgBjB,UAAU,yBAAzC,6BACA,kBAAC,IAAD,CAAcO,KAAK,gBAAgBK,UAAU,MAAMZ,UAAU,gCAEjE,yBAAKA,UAAU,2BACX,4BAAQQ,KAAK,SAASK,MAAM,SAASb,UAAW,CAACC,IAAQiB,MAAO,QAAQP,KAAK,MAA7E,UACA,4BAAQH,KAAK,QAAQK,MAAM,QAAQM,QAAS1C,EAAauB,UAAWC,IAAQmB,KAA5E,WAIJ7C,EACI,kBAAC8C,EAAA,EAAD,CAAMrB,UAAW,CAACC,IAAQoB,KAAM,oBAAoBV,KAAK,MACrD,yBAAKX,UAAU,iCACX,0CAAgBzB,EAAKI,WACrB,yCAAeJ,EAAKK,UACpB,sCAAYL,EAAKM,OACjB,uCAAaN,EAAKO,QAClB,2CAAiBP,EAAKQ,YACtB,yCAAeR,EAAKS,UACpB,iDAAuBT,EAAKU,mBAIpC,YCrHrBqC,E,uKARX,OACE,6BACE,kBAAC,EAAD,W,GAJUC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.825a9c49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"RegistrationForm_Input__33XWu\",\"Form\":\"RegistrationForm_Form__1Ba4k\",\"Segment\":\"RegistrationForm_Segment__1VRoz\",\"Card\":\"RegistrationForm_Card__2RPAL\",\"Select\":\"RegistrationForm_Select__3iNeY\",\"Red\":\"RegistrationForm_Red__KOEy_\",\"Green\":\"RegistrationForm_Green__3u7jZ\"};","import React, { useState } from 'react';\r\nimport classes from './RegistrationForm.module.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst RegistrationForm = () => {\r\n    const [Data, setData] = useState(null)\r\n\r\n    const submitValues = (values) => {\r\n        setData(values)\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setData(null)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                gender: '',\r\n                department: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n                acceptedTerms: false,\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n                firstName: Yup.string().required(\"First Name is required!\"),\r\n                lastName: Yup.string().required('Last name is required'),\r\n                email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\r\n                department: Yup.string()\r\n                    .oneOf(\r\n                        ['designer', 'development', 'product', 'other'],\r\n                        'Invalid Department'\r\n                    )\r\n                    .required('Please Select Your Department'),\r\n                gender: Yup.string().required('Please Select Your Gender'),\r\n                password: Yup.string().min(6, \"Password length must be 6 characters or long\").required(\"Password is required\"),\r\n                confirmPassword: Yup.string()\r\n                    .oneOf([Yup.ref('password')], 'Password must match')\r\n                    .required('Confirm Password is required'),\r\n                acceptedTerms: Yup.bool().oneOf([true], \"You must accept T&C\"),\r\n            })}\r\n            onSubmit={\r\n                submitValues\r\n            }\r\n        >\r\n\r\n            {({ errors, touched }) => (\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form className={classes.Form} action=\"./\" method=\"post\" acceptCharset=\"UTF-8\">\r\n                                <div className={classes.Segment}>\r\n                                    <h1>Sign up</h1>\r\n                                </div>\r\n                                <div className='d-flex'>\r\n                                    <label className='mr-3'>\r\n                                        <Field name=\"firstName\" type=\"text\" placeholder=\"First Name\" className={[(errors.firstName && touched.firstName ? 'is-invalid' : ''), classes.Input].join(' ')} />\r\n                                        <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </label>\r\n                                    <label>\r\n                                        <Field name=\"lastName\" type=\"text\" placeholder=\"Last Name\" className={[(errors.lastName && touched.lastName ? 'is-invalid' : ''), classes.Input].join(' ')} />\r\n                                        <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </label>\r\n                                </div>\r\n                                <div className='d-flex'>\r\n                                    <label className='text-center'>\r\n                                        <b>Please select your gender:</b><br />\r\n                                        <Field name=\"gender\" type=\"radio\" value=\"male\" className={[(errors.gender && touched.gender ? 'is-invalid' : ''), ''].join(' ')}></Field>\r\n                                        <strong className='ml-1'>Male</strong>\r\n                                        <Field name=\"gender\" type=\"radio\" value=\"female\" className={[(errors.gender && touched.gender ? 'is-invalid' : ''), 'ml-3'].join(' ')}></Field>\r\n                                        <strong className='ml-1'>Female</strong>\r\n                                        <ErrorMessage name=\"gender\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </label>\r\n                                    <label>\r\n                                        <Field name=\"department\" as=\"select\" className={[(errors.department && touched.department ? 'is-invalid' : ''), classes.Select].join(' ')}>\r\n                                            <option value=\"\">Select a job type</option>\r\n                                            <option value=\"designer\">Designer</option>\r\n                                            <option value=\"development\">Developer</option>\r\n                                            <option value=\"product\">Product Manager</option>\r\n                                            <option value=\"other\">Other</option>\r\n                                        </Field>\r\n                                        <ErrorMessage name=\"department\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </label>\r\n                                </div>\r\n                                <label>\r\n                                    <Field name=\"email\" type=\"email\" placeholder=\"Email Address\" className={[(errors.email && touched.email ? 'is-invalid' : ''), classes.Input].join(' ')} />\r\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </label>\r\n                                <div className='d-flex'>\r\n                                    <label className='mr-3'>\r\n                                        <Field name=\"password\" type=\"password\" placeholder=\"Password\" autoComplete=\"false\" className={[(errors.password && touched.password ? 'is-invalid' : ''), classes.Input].join(' ')} />\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </label>\r\n                                    <label>\r\n                                        <Field name=\"confirmPassword\" type=\"password\" placeholder=\"Confirm Password\" autoComplete=\"false\" className={[(errors.confirmPassword && touched.confirmPassword ? 'is-invalid' : ''), classes.Input].join(' ')} />\r\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"ml-4\">\r\n                                    <Field type=\"checkbox\" name=\"acceptedTerms\" className={['form-check-input mb-0' + (errors.acceptedTerms && touched.acceptedTerms ? ' is-invalid' : '')]} />\r\n                                    <label htmlFor=\"acceptedTerms\" className=\"form-check-label mb-0\">Accept Terms & Conditions</label>\r\n                                    <ErrorMessage name=\"acceptedTerms\" component=\"div\" className=\"invalid-feedback mt-0 mb-4\" />\r\n                                </div>\r\n                                <div className=\"text-center d-flex mt-4\">\r\n                                    <button type=\"submit\" value=\"submit\" className={[classes.Green, 'mr-3'].join(' ')}>SUBMIT</button>\r\n                                    <button type=\"reset\" value=\"reset\" onClick={handleReset} className={classes.Red}>RESET</button>\r\n                                </div>\r\n                            </Form>\r\n                            {\r\n                                Data ?\r\n                                    <Card className={[classes.Card, 'text-center my-5'].join(' ')}>\r\n                                        <div className='text-dark mt-4 text-uppercase'>\r\n                                            <p>Firstname : {Data.firstName}</p>\r\n                                            <p>Lastname : {Data.lastName}</p>\r\n                                            <p>Email : {Data.email}</p>\r\n                                            <p>Gender : {Data.gender}</p>\r\n                                            <p>Department : {Data.department}</p>\r\n                                            <p>Password : {Data.password}</p>\r\n                                            <p>Confirm Password : {Data.confirmPassword}</p>\r\n                                        </div>\r\n                                    </Card>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </Formik>\r\n    );\r\n\r\n};\r\n\r\nexport default RegistrationForm;","import React, { Component } from 'react';\r\nimport RegistrationForm from './components/RegistrationForm';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <RegistrationForm />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}