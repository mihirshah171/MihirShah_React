{"version":3,"sources":["hoc/WithSpinner/Loader.module.css","components/UI/Modals/Modals.js","components/UI/Button/Button.js","components/UI/Forms/RegistrationForm/RegistrationForm.js","components/UI/Forms/UpdateForm/UpdateForm.js","components/DisplayUserInformations/DisplayUserInformations.js","hoc/WithSpinner/WithLoading.js","hoc/withErrorHandler/withErrorHandler.js","containers/Dashboard.js","App.js","serviceWorker.js","index.js","components/DisplayUserInformations/DisplayUserInformations.module.css","containers/Dashboard.module.css","components/UI/Button/Button.module.css"],"names":["module","exports","Modals","props","Modal","centered","size","show","onHide","Header","closeButton","Title","id","header","Body","ErrorMsg","children","footer","Footer","CButton","type","disabled","className","classes","Button","btnType","join","onClick","clicked","RegistrationForm","useState","updating","setupdating","initialValues","FirstName","LastName","Email","City","State","Country","Department","Gender","validationSchema","Yup","shape","required","email","oneOf","onSubmit","values","setSubmitting","setTimeout","insert","submitValues","errors","touched","Row","Col","htmlFor","name","placeholder","component","as","value","isLoading","setLoading","data","update","_id","updatedValues","DisplayUserInformations","info","setShow","delshow","setdelShow","handleClose","Alert","variant","delete","xs","md","lg","CardColumns","Accordion","defaultActiveKey","Card","style","width","Toggle","eventKey","Collapse","Container","Text","Icon","key","UpdateForm","backdrop","keyboard","WithLoading","WrappedComponent","Loader","color","height","withErrorHandler","axios","state","error","errorConfirmedHandler","setState","this","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","eject","message","Component","ListWithLoading","FormWithLoading","users","totalPrice","loading","handleGetData","get","then","catch","err","finally","handleSubmitForm","post","newUser","User","patch","console","log","updateUser","filter","x","Data","currentusers","deleteUser","erromsg","LinkModal","href","AddIcon","bind","map","user","handleDelete","handleUpdate","App","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70c48dbd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__3kzol\"};","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst Modals = (props) => {\r\n    return (\r\n        <div>\r\n            <Modal\r\n                {...props}\r\n                centered\r\n                size=\"lg\"\r\n                show={props.show}\r\n                onHide={props.onHide}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                        {props.header}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {props.ErrorMsg}\r\n                    {props.children}\r\n                </Modal.Body>\r\n                {\r\n                    props.footer ?\r\n                        <Modal.Footer>\r\n                            {props.footer}\r\n                        </Modal.Footer>\r\n                        :\r\n                        null\r\n                }\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modals;","import React from 'react';\r\n\r\nimport classes from './Button.module.css';\r\n\r\nconst CButton = (props) => (\r\n    <button\r\n        type={props.type}\r\n        disabled={props.disabled}\r\n        className={[classes.Button, classes[props.btnType]].join(' ')}\r\n        onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default CButton;","import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport CButton from '../../Button/Button';\r\nimport * as Yup from 'yup';\r\n\r\nconst RegistrationForm = (props) => {\r\n    const [updating, setupdating] = useState(false);\r\n\r\n    const submitValues = (values) => {\r\n        props.insert(values)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    FirstName: '',\r\n                    LastName: '',\r\n                    Email: '',\r\n                    City: '',\r\n                    State: '',\r\n                    Country: '',\r\n                    Department: '',\r\n                    Gender: '',\r\n                }}\r\n                validationSchema={\r\n                    Yup.object().shape({\r\n                        FirstName: Yup.string().required(\"First Name is required!\"),\r\n                        LastName: Yup.string().required('Last name is required'),\r\n                        Email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\r\n                        City: Yup.string().required(\"City is required\"),\r\n                        State: Yup.string().required(\"State is required\"),\r\n                        Country: Yup.string().required(\"Country is required\"),\r\n                        Department: Yup.string()\r\n                            .oneOf(\r\n                                ['designer', 'development', 'product', 'other'],\r\n                                'Invalid Department'\r\n                            )\r\n                            .required('Please Select Your Department'),\r\n                        Gender: Yup.string().required('Please Select Your Gender'),\r\n                    })\r\n                }\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setupdating(true);\r\n                    setTimeout(() => {\r\n                        setSubmitting(false);\r\n                        submitValues(values);\r\n\r\n                    }, 3000);\r\n                }}\r\n            >\r\n                {({ errors, touched }) => (\r\n                    <Form>\r\n                        <div className=\"form-group\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"FirstName\">First Name</label>\r\n                                        <Field type='text' name='FirstName' placeholder='First Name' className={[\"form-control \" + (errors.FirstName && touched.FirstName ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"FirstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"LastName\">Last Name</label>\r\n                                        <Field type='text' name='LastName' placeholder='Last Name' className={[\"form-control \" + (errors.LastName && touched.LastName ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"LastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"form-group col\">\r\n                                <label htmlFor=\"Email\">Email</label>\r\n                                <Field type='text' name='Email' placeholder='Email Address' className={[\"form-control \" + (errors.Email && touched.Email ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                <ErrorMessage name=\"Email\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"City\">City</label>\r\n                                        <Field type='text' name='City' placeholder='City' className={[\"form-control \" + (errors.City && touched.City ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"City\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"State\">State</label>\r\n                                        <Field type='text' name='State' placeholder='State' className={[\"form-control \" + (errors.State && touched.State ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"State\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Country\">Country</label>\r\n                                        <Field type='text' name='Country' placeholder='Country' className={[\"form-control \" + (errors.Country && touched.Country ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"Country\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Department\">Department</label>\r\n                                        <Field name=\"Department\" as=\"select\" className={[\"form-control \" + (errors.Department && touched.Department ? 'is-invalid' : '')].join(' ')}>\r\n                                            <option value=\"\">Select a job type</option>\r\n                                            <option value=\"designer\">Designer</option>\r\n                                            <option value=\"development\">Developer</option>\r\n                                            <option value=\"product\">Product Manager</option>\r\n                                            <option value=\"other\">Other</option>\r\n                                        </Field>\r\n                                        <ErrorMessage name=\"Department\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Gender\">Gender</label>\r\n                                        <div className=\"form-control text-center\">\r\n                                            <Field name=\"Gender\" type=\"radio\" value=\"male\" className={[(errors.Gender && touched.Gender ? 'is-invalid' : ''), ''].join(' ')}></Field>\r\n                                            <strong className='ml-1'>Male</strong>\r\n                                            <Field name=\"Gender\" type=\"radio\" value=\"female\" className={[(errors.Gender && touched.Gender ? 'is-invalid' : ''), 'ml-3'].join(' ')}></Field>\r\n                                            <strong className='ml-1'>Female</strong>\r\n                                            <Field name=\"Gender\" type=\"radio\" value=\"other\" className={[(errors.Gender && touched.Gender ? 'is-invalid' : ''), 'ml-3'].join(' ')}></Field>\r\n                                            <strong className='ml-1'>Other</strong>\r\n                                        </div>\r\n                                        <ErrorMessage name=\"Gender\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"form-group text-center mt-3\">\r\n                                <CButton\r\n                                    type='submit'\r\n                                    disabled={updating}\r\n                                    btnType=\"Success\"\r\n                                >\r\n                                    {updating ? 'User added successfully…' : 'SUBMIT'}\r\n                                </CButton>\r\n                                <CButton\r\n                                    type='reset'\r\n                                    btnType=\"Danger\"\r\n                                >\r\n                                    {updating ? null : 'RESET'}\r\n\r\n                                </CButton>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RegistrationForm;","import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from '../../Button/Button';\r\nimport * as Yup from 'yup';\r\n\r\nconst RegistrationForm = (props) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const { data } = props\r\n    const updatedValues = (values) => {\r\n        props.update(data._id, values)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    FirstName: data.FirstName,\r\n                    LastName: data.LastName,\r\n                    Email: data.Email,\r\n                    City: data.City,\r\n                    State: data.State,\r\n                    Country: data.Country,\r\n                    Department: data.Department,\r\n                    Gender: data.Gender,\r\n                }}\r\n                validationSchema={\r\n                    Yup.object().shape({\r\n                        FirstName: Yup.string().required(\"First Name is required!\"),\r\n                        LastName: Yup.string().required('Last name is required'),\r\n                        Email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\r\n                        City: Yup.string().required(\"City is required\"),\r\n                        State: Yup.string().required(\"State is required\"),\r\n                        Country: Yup.string().required(\"Country is required\"),\r\n                        Department: Yup.string()\r\n                            .oneOf(\r\n                                ['designer', 'development', 'product', 'other'],\r\n                                'Invalid Department'\r\n                            )\r\n                            .required('Please Select Your Department'),\r\n                        Gender: Yup.string().required('Please Select Your Gender'),\r\n                    })\r\n                }\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setLoading(true);\r\n                    setTimeout(() => {\r\n                        setSubmitting(false);\r\n                        updatedValues(values);\r\n                    }, 3000);\r\n                }}\r\n            >\r\n                {({ errors, touched }) => (\r\n                    <Form>\r\n                        <div className=\"form-group\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"FirstName\">First Name</label>\r\n                                        <Field type='text' name='FirstName' placeholder='First Name' className={[\"form-control \" + (errors.FirstName && touched.FirstName ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"FirstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"LastName\">Last Name</label>\r\n                                        <Field type='text' name='LastName' placeholder='Last Name' className={[\"form-control \" + (errors.LastName && touched.LastName ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"LastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"form-group col\">\r\n                                <label htmlFor=\"Email\">Email</label>\r\n                                <Field type='text' name='Email' placeholder='Email Address' className={[\"form-control \" + (errors.Email && touched.Email ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                <ErrorMessage name=\"Email\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"City\">City</label>\r\n                                        <Field type='text' name='City' placeholder='City' className={[\"form-control \" + (errors.City && touched.City ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"City\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"State\">State</label>\r\n                                        <Field type='text' name='State' placeholder='State' className={[\"form-control \" + (errors.State && touched.State ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"State\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Country\">Country</label>\r\n                                        <Field type='text' name='Country' placeholder='Country' className={[\"form-control \" + (errors.Country && touched.Country ? 'is-invalid' : '')].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"Country\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Department\">Department</label>\r\n                                        <Field name=\"Department\" as=\"select\" className={[\"form-control \" + (errors.Department && touched.Department ? 'is-invalid' : '')].join(' ')}>\r\n                                            <option value=\"\">Select a job type</option>\r\n                                            <option value=\"designer\">Designer</option>\r\n                                            <option value=\"development\">Developer</option>\r\n                                            <option value=\"product\">Product Manager</option>\r\n                                            <option value=\"other\">Other</option>\r\n                                        </Field>\r\n                                        <ErrorMessage name=\"Department\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Gender\">Gender</label>\r\n                                        <div className=\"form-control text-center\">\r\n                                            <Field name=\"Gender\" type=\"radio\" value=\"male\" className={[(errors.Gender && touched.Gender ? 'is-invalid' : ''), ''].join(' ')}></Field>\r\n                                            <strong className='ml-1'>Male</strong>\r\n                                            <Field name=\"Gender\" type=\"radio\" value=\"female\" className={[(errors.Gender && touched.Gender ? 'is-invalid' : ''), 'ml-3'].join(' ')}></Field>\r\n                                            <strong className='ml-1'>Female</strong>\r\n                                            <Field name=\"Gender\" type=\"radio\" value=\"other\" className={[(errors.Gender && touched.Gender ? 'is-invalid' : ''), 'ml-3'].join(' ')}></Field>\r\n                                            <strong className='ml-1'>Other</strong>\r\n                                        </div>\r\n                                        <ErrorMessage name=\"Gender\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"form-group text-center mt-3\">\r\n                                <Button\r\n                                    type='update'\r\n                                    btnType=\"Success\"\r\n                                    disabled={isLoading}\r\n                                >\r\n                                    {isLoading ? 'User information updated successfully…' : 'UPDATE'}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RegistrationForm;","import React, { useState } from 'react';\r\nimport classes from './DisplayUserInformations.module.css';\r\nimport { FiEdit } from 'react-icons/fi';\r\nimport { RiDeleteBin5Line } from 'react-icons/ri';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport Modals from '../UI/Modals/Modals';\r\nimport UpdateForm from '../UI/Forms/UpdateForm/UpdateForm';\r\n\r\nconst DisplayUserInformations = (props) => {\r\n    const { info } = props;\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [delshow, setdelShow] = useState(false);\r\n    const handleClose = () => setdelShow(false);\r\n    const handleShow = () => setdelShow(true);\r\n    const Alert =\r\n        <>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n                No\r\n            </Button>\r\n            <Button variant=\"danger\" onClick={() => props.delete(info._id)}>\r\n                Yes\r\n            </Button>\r\n        </>\r\n\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className='px-5'>\r\n            <CardColumns>\r\n                <Accordion defaultActiveKey=\"0\" className='text-white'>\r\n                    <Card className={[classes.Card, \"text-center mb-3 text-light\"].join(' ')} style={{ width: '18rem' }}>\r\n                        <Card.Header>\r\n                            <h5 className='text-white'>{info.FirstName + ' ' + info.LastName}</h5>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className='text-white'>\r\n                                <Button variant=\"outline-light\">Show More Details!</Button>\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <Card.Body className={classes.Container}>\r\n                                <Card.Text>\r\n                                    Firstname : {info.FirstName} <br />\r\n                                    Lastname : {info.LastName}<br />\r\n                                    Email : {info.Email}<br />\r\n                                    Address :&nbsp; {info.City} , {info.State} , {info.Country}<br />\r\n                                    Department : {info.Department}<br />\r\n                                    Gender : {info.Gender}<br />\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                        <Card.Footer className=\"text-white d-flex justify-content-between\">\r\n                            <FiEdit className={classes.Icon} key=\"updat\" onClick={() => setShow(true)} />\r\n                            <RiDeleteBin5Line className={classes.Icon} key=\"delet\" onClick={handleShow} />\r\n                        </Card.Footer>\r\n                        <Modals\r\n                            show={show}\r\n                            onHide={() => setShow(false)}\r\n                            header='Update'\r\n                        >\r\n                            <UpdateForm data={info} update={props.update} />\r\n                        </Modals>\r\n                        <Modals\r\n                            show={delshow}\r\n                            onHide={handleClose}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            header='Confirmation'\r\n                            footer={Alert}\r\n                        >\r\n                            Are You Sure You Want to Delete ?\r\n                    </Modals>\r\n                    </Card>\r\n                </Accordion>\r\n            </CardColumns>\r\n        </Col>\r\n    )\r\n};\r\n\r\nexport default DisplayUserInformations;","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport classes from './Loader.module.css';\r\n\r\nconst WithLoading = (WrappedComponent) => {\r\n    debugger\r\n    return function WithLoadingWrappedComponent({ isLoading, children, ...props }) {\r\n        if (!isLoading) {\r\n            return (<WrappedComponent {...props} />);\r\n        }\r\n        return (\r\n            <div className={classes.Loader}>\r\n                <Loader\r\n                    type=\"Circles\"\r\n                    color=\"white\"\r\n                    height={100}\r\n                    width={100}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WithLoading;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Modals from '../../components/UI/Modals/Modals';\r\n\r\nconst withErrorHandler = (WrappedComponent, axios) => {\r\n    return class extends Component {\r\n        state = {\r\n            error: null\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.reqInterceptor = axios.interceptors.request.use(req => {\r\n                this.setState({ error: null });\r\n                return req;\r\n            });\r\n            this.resInterceptor = axios.interceptors.response.use(res => res, error => {\r\n                this.setState({ error: error });\r\n            });\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            axios.interceptors.request.eject(this.reqInterceptor);\r\n            axios.interceptors.response.eject(this.resInterceptor);\r\n        }\r\n\r\n        errorConfirmedHandler = () => {\r\n            this.setState({ error: null });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Fragment>\r\n                    <Modals\r\n                        show={this.state.error}\r\n                        onHide={this.errorConfirmedHandler}\r\n                        header='Error'\r\n                    >\r\n                        {this.state.error ? this.state.error.message : null}\r\n                    </Modals>\r\n                    <WrappedComponent {...this.props} />\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default withErrorHandler;","import React, { Component, Fragment } from 'react';\r\nimport classes from './Dashboard.module.css'\r\nimport axios from 'axios';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { AiOutlineUserAdd } from 'react-icons/ai';\r\nimport Modals from '../components/UI/Modals/Modals';\r\nimport RegistrationForm from '../components/UI/Forms/RegistrationForm/RegistrationForm';\r\nimport DisplayUserInformations from '../components/DisplayUserInformations/DisplayUserInformations';\r\nimport WithLoading from '../hoc/WithSpinner/WithLoading';\r\nimport withErrorHandler from '../hoc/withErrorHandler/withErrorHandler';\r\nconst ListWithLoading = WithLoading(DisplayUserInformations);\r\nconst FormWithLoading = WithLoading(RegistrationForm);\r\n\r\nclass Dashboard extends Component {\r\n\r\n    state = {\r\n        users: [],\r\n        totalPrice: 4,\r\n        show: false,\r\n        loading: false,\r\n        error: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleGetData()\r\n    }\r\n\r\n    handleGetData = () => {\r\n        this.setState({ loading: true });\r\n        setTimeout(() => {\r\n            axios.get(\"users\")\r\n                .then(res => {\r\n                    debugger\r\n                    const users = [...res.data.data]\r\n                    this.setState({ users: users })\r\n                })\r\n                .catch(err => {\r\n                    debugger\r\n                    this.setState({ error: true });\r\n                })\r\n                .finally(() => {\r\n                    this.setState({ loading: false })\r\n                })\r\n        }, 3000);\r\n    }\r\n\r\n    handleSubmitForm = (data) => {\r\n        debugger\r\n        this.setState({ loading: true });\r\n        axios.post('users', data)\r\n            .then(res => {\r\n                const newUser = { ...res.data.data };\r\n                const User = [...this.state.users, newUser];\r\n                this.setState({ users: User, show: false })\r\n            })\r\n            .catch(err => {\r\n                this.setState({ error: true });\r\n            })\r\n            .finally(() => {\r\n                this.setState({ loading: false })\r\n            })\r\n    }\r\n\r\n    handleUpdate(id, data) {\r\n        debugger\r\n        this.setState({ loading: true });\r\n        axios.patch('users/' + id, data)\r\n            .then(res => {\r\n                debugger\r\n                console.log(res);\r\n                const currentUsers = [...this.state.users];\r\n                const updateUser = currentUsers.filter(x => x._id !== id)\r\n                console.log('[uu]', updateUser)\r\n                const newUser = { ...res.data.Data }\r\n                const User = [...updateUser, newUser]\r\n                this.setState({ users: User, show: false });\r\n            })\r\n            .catch(err => {\r\n                this.setState({ error: true });\r\n            })\r\n            .finally(() => {\r\n                this.setState({ loading: false })\r\n            })\r\n    }\r\n\r\n    handleDelete(id) {\r\n        this.setState({ loading: true });\r\n        axios.delete('users/' + id)\r\n            .then(res => {\r\n                const prevusers = [...this.state.users];\r\n                const currentusers = prevusers.filter(deleteUser => deleteUser._id !== id)\r\n                this.setState({ users: currentusers, show: false })\r\n            })\r\n            .catch(err => {\r\n                this.setState({ erromsg: err })\r\n                this.setState({ error: true });\r\n            })\r\n            .finally(() => this.setState({ loading: false }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    {this.state.loading && <ListWithLoading isLoading={this.state.loading} />}\r\n                </div>\r\n                <div className='my-5 ml-4'>\r\n                    <div className={classes.LinkModal} id=\"linkmodal\">\r\n                        <button href onClick={() => this.setState({ show: true })}>\r\n                            <AiOutlineUserAdd className={classes.AddIcon} />\r\n                            <span className='ml-3'>Add New User</span>\r\n                        </button>\r\n                    </div>\r\n                    <Modals\r\n                        show={this.state.show}\r\n                        onHide={() => this.setState({ show: false })}\r\n                        header='Form'\r\n                    >\r\n                        <FormWithLoading isLoading={this.state.loading} insert={this.handleSubmitForm.bind(this)} />\r\n                    </Modals>\r\n                </div>\r\n                <Row className=\"justify-content-center w-100\">\r\n                    {\r\n                        this.state.users.map((user) =>\r\n                            <ListWithLoading\r\n                                isLoading={this.state.loading}\r\n                                key={user._id}\r\n                                info={user}\r\n                                delete={this.handleDelete.bind(this)}\r\n                                update={this.handleUpdate.bind(this)}\r\n                            />)\r\n                    }\r\n                </Row>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withErrorHandler(Dashboard, axios);","import React from 'react';\r\nimport './App.css';\r\nimport Dashboard from './containers/Dashboard';\r\n\r\nconst App = props => {\r\n  return (\r\n    <div>\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport axios from 'axios';\r\naxios.defaults.baseURL =  'http://localhost:4000/';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Icon\":\"DisplayUserInformations_Icon__26OZ3\",\"Card\":\"DisplayUserInformations_Card__3aH-P\",\"Container\":\"DisplayUserInformations_Container__2bnBx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddIcon\":\"Dashboard_AddIcon__1L7bT\",\"LinkModal\":\"Dashboard_LinkModal__15vin\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__12AHd\",\"Success\":\"Button_Success__2cZYh\",\"Danger\":\"Button_Danger__2ZagI\"};"],"sourceRoot":""}