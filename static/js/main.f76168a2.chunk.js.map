{"version":3,"sources":["hoc/Loader.module.css","serviceWorker.js","components/Header/Header.js","components/Content/Content.js","containers/LoaderDesk.js","hoc/WithLoading .js","App.js","index.js","containers/LoaderDesk.module.css","components/Header/Header.module.css","components/Content/Content.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","props","className","classes","children","Content","Table","responsive","striped","bordered","colSpan","ContentWithLoading","Component","isLoading","Loader","type","color","height","width","WithLoading","LoaderDesk","useState","loading","setloading","useEffect","cloading","interval","setInterval","clearInterval","Desk","join","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,OAAS,yB,sJCWPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0ECTSC,EANA,SAAAC,GACX,OACI,4BAAQC,UAAWC,IAAQH,QAASC,EAAMG,W,wBCmCnCC,EApCC,SAACJ,GACb,OACI,6BACI,kBAACK,EAAA,EAAD,CAAOC,WAAW,KAAKC,SAAO,EAACC,UAAQ,EAACP,UAAWC,IAAQG,OACvD,+BACI,4BACI,iCACA,0CACA,yCACA,0CAGR,+BACI,4BACI,iCACA,oCACA,oCACA,qCAEJ,4BACI,iCACA,qCACA,wCACA,qCAEJ,4BACI,iCACA,wBAAII,QAAQ,KAAZ,kBACA,6C,0CC3BlBC,ECDc,SAACC,GACjB,OAAO,YAA+C,IAAxBC,EAAuB,EAAvBA,UAAcZ,EAAS,6BACjD,OAAKY,EAID,yBAAKX,UAAWC,IAAQW,QACpB,kBAAC,IAAD,CACIC,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,OARP,kBAACN,EAAcX,IDFRkB,CAAYd,GAyBxBe,EAvBI,SAACnB,GAAW,IAAD,EACIoB,oBAAS,GADb,mBACnBC,EADmB,KACVC,EADU,KAW1B,OARAC,qBAAU,WACND,GAAW,SAAAE,GAAQ,OAAI,KACvB,IAAMC,EAAWC,aAAY,WACzBJ,GAAW,SAAAD,GAAO,OAAI,OACvB,KACH,OAAO,kBAAMM,cAAcF,MAC5B,IAGC,6BACI,yBAAKxB,UAAW,CAACC,IAAQ0B,KAAM,qCAAqCC,KAAK,MACrE,kBAAC,EAAD,KAAQ,8CAEZ,6BACI,kBAACnB,EAAD,CAAoBE,UAAWS,OEXhCS,E,uKARX,OACE,6BACE,kBAAC,EAAD,W,GAJUnB,aCKlBoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBOxI5BrD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,kBCAzDD,EAAOC,QAAU,CAAC,OAAS,yB,kBCA3BD,EAAOC,QAAU,CAAC,MAAQ,0B","file":"static/js/main.f76168a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__2ttPw\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header className={classes.Header}>{props.children}</header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport classes from './Content.module.css';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst Content = (props) => {\r\n    return (\r\n        <div>\r\n            <Table responsive=\"sm\" striped bordered className={classes.Table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>1</td>\r\n                        <td>Mark</td>\r\n                        <td>Otto</td>\r\n                        <td>@mdo</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>2</td>\r\n                        <td>Jacob</td>\r\n                        <td>Thornton</td>\r\n                        <td>@fat</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>3</td>\r\n                        <td colSpan=\"2\">Larry the Bird</td>\r\n                        <td>@twitter</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Content;","import React, { useState, useEffect } from 'react';\r\nimport classes from './LoaderDesk.module.css'\r\nimport Header from '../components/Header/Header';\r\nimport Content from '../components/Content/Content';\r\nimport WithLoading from '../hoc/WithLoading ';\r\nconst ContentWithLoading = WithLoading(Content);\r\n\r\nconst LoaderDesk = (props) => {\r\n    const [loading, setloading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setloading(cloading => true);\r\n        const interval = setInterval(() => {\r\n            setloading(loading => false);\r\n        }, 5000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div className={[classes.Desk, \"text-uppercase font-weight-bolder\"].join(' ')}>\r\n                <Header><h1>Spinner Desk</h1></Header>\r\n            </div>\r\n            <div>\r\n                <ContentWithLoading isLoading={loading} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoaderDesk;","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport classes from './Loader.module.css';\r\n\r\nconst WithLoading = (Component) => {\r\n    return function WithLoading({ isLoading, ...props }) {\r\n        if (!isLoading) {\r\n            return (<Component {...props} />);\r\n        }\r\n        return (\r\n            <div className={classes.Loader}>\r\n                <Loader\r\n                    type=\"Grid\"\r\n                    color=\"#ffffff\"\r\n                    height={100}\r\n                    width={100}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WithLoading;","import React, { Component } from 'react';\r\nimport LoaderDesk from './containers/LoaderDesk'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <LoaderDesk />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Desk\":\"LoaderDesk_Desk__22Ivf\",\"Card\":\"LoaderDesk_Card__1jSuk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__5Thnr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"Content_Table__2i9_t\"};"],"sourceRoot":""}