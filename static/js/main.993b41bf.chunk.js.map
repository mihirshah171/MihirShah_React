{"version":3,"sources":["components/List.js","hoc/WithLoading .js","App.js","serviceWorker.js","index.js"],"names":["WithLoading","Component","isLoading","props","style","textAlign","marginTop","type","color","height","width","repos","length","map","repo","key","id","full_name","IntervalExample","useState","seconds","setSeconds","loading","setLoading","useEffect","interval","setInterval","clearInterval","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAoBeA,ECjBK,SAACC,GACjB,OAAO,YAAwD,IAAxBC,EAAuB,EAAvBA,UAAcC,EAAS,6BAK1D,OAAKD,EAID,yBAAKE,MARK,CACVC,UAAW,SACXC,UAAW,UAOP,kBAAC,IAAD,CACIC,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,OARP,kBAACT,EAAcE,IDUpBH,EAjBF,SAAAG,GAAU,IACXQ,EAAUR,EAAVQ,MAER,OAAKA,EACAA,EAAMC,OAEP,4BAEQD,EAAME,KAAI,SAAAC,GACN,OACI,wBAAIC,IAAKD,EAAKE,IAAKF,EAAKG,eANjB,8CADR,QE4CRC,EAtBS,WAAO,IAAD,EACEC,mBAAS,GADX,mBACrBC,EADqB,KACZC,EADY,OAEEF,oBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,KAY5B,OARAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BL,GAAW,SAAAD,GAAO,OAAIA,EAAU,KAChCG,GAAW,SAAAH,GAAO,OAAI,OACrB,KACH,OAAO,kBAAMO,cAAcF,MAC1B,IAGD,yBAAKG,UAAU,OACb,kBAAC,EAAD,CAAM1B,UAAWoB,IACjB,4BAAQM,UAAU,cACfR,EADH,2CC/BcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.993b41bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport WithLoading from '../hoc/WithLoading '\r\n\r\nconst List = props => {\r\n    const { repos } = props;\r\n\r\n    if (!repos) return null;\r\n    if (!repos.length) return (<p>No repos, sorry</p>)\r\n    return (\r\n        <ul>\r\n            {\r\n                repos.map(repo => {\r\n                    return (\r\n                        <li key={repo.id}>{repo.full_name}</li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}\r\nexport default WithLoading(List);","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst WithLoading = (Component) => {\r\n    return function WithLoadingComponent({ isLoading, ...props }) {\r\n        const Style = {\r\n            textAlign: 'center',\r\n            marginTop: '225px'\r\n        }\r\n        if (!isLoading) {\r\n            return (<Component {...props} />);\r\n        }\r\n        return (\r\n            <div style={Style}>\r\n                <Loader\r\n                    type=\"Oval\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default WithLoading;","// import React from 'react';\r\n// import List from './components/List';\r\n\r\n// class App extends React.Component {\r\n//   state = {\r\n//     loading: false,\r\n//     repos: null\r\n//   }\r\n//   componentDidMount() {\r\n//     this.setState({ loading: true });\r\n//     fetch(`https://api.github.com/users/farskid/repos`)\r\n//       .then(json => json.json())\r\n//       .then(repos => {\r\n//         this.setState({ loading: false, repos: repos });\r\n//       });\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <List isLoading={this.state.loading} repos={this.state.repos} />\r\n//     )\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport List from './components/List';\r\n\r\nconst IntervalExample = () => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(seconds => seconds + 1);\r\n      setLoading(seconds => false);\r\n    }, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <List isLoading={loading} />\r\n      <header className=\"App-header\">\r\n        {seconds} seconds have elapsed since mounting.\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IntervalExample;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}