{"version":3,"sources":["Components/List/List.module.css","container/Dashboard.module.css","Components/Form/UserForm.js","Components/List/List.js","container/Dashboard.js","Redux/Action/action.js","Redux/Constant/actionTypes.js","App.js","Redux/Utility/Utility.js","Redux/Reducer/reducer.js","Redux/Store/store.js","index.js","Components/Form/UserForm.module.css"],"names":["module","exports","RegistrationForm","props","data","initialValues","title","Age","City","Country","Name","State","validationSchema","Yup","shape","matches","required","max","onSubmit","values","resetForm","onCreate","submitValues","id","updatedValues","errors","touched","className","classes","Header","header","Row","Col","lg","md","sm","xs","htmlFor","type","name","placeholder","Input","join","component","ErrorMessage","Button","onClick","clicked","List","bordered","columns","dataSource","Table","pagination","position","Dashboard","dataIndex","key","render","text","record","size","EditTwoTone","onUpdateStart","onConfirm","onConfirmDelete","DeleteTwoTone","this","update","users","filter","updateID","map","UserForm","onUpdateUser","onSubmitUsers","Component","connect","state","userID","dispatch","payload","actions","App","updateObject","oldObject","updatedProperties","initialState","Date","now","toString","Math","random","substr","toUpperCase","addUser","action","newData","manipulatedState","removeUser","item","updateUser","current","objIndex","findIndex","obj","updatedObj","newUsers","Object","assign","startUpdating","rootReducer","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1ef07b9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"List_Table__36uK3\",\"Header\":\"List_Header__2QxEZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Dashboard_Header__1uA5b\",\"Row\":\"Dashboard_Row__2fB3R\"};","import * as Yup from 'yup';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport classes from './UserForm.module.css';\r\n\r\nconst RegistrationForm = (props) => {\r\n    const { data } = props;\r\n    const updatedValues = (values) => {\r\n        props.onCreate(\r\n            data.id,\r\n            values\r\n        )\r\n    }\r\n    const submitValues = (values) => {\r\n        props.onCreate(values)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={\r\n                props.title === 'Update'\r\n                    ? {\r\n                        Age: data.Age,\r\n                        City: data.City,\r\n                        Country: data.Country,\r\n                        Name: data.Name,\r\n                        State: data.State\r\n                    }\r\n                    : {\r\n                        Age: '',\r\n                        City: '',\r\n                        Country: '',\r\n                        Name: '',\r\n                        State: ''\r\n                    }\r\n            }\r\n            validationSchema={\r\n                Yup.object().shape({\r\n                    Age: Yup.string().matches(/^(1[89]|[2-9]\\d)$/, 'Your Age Should be In Numbers Only').required('Your Age is required*'),\r\n                    City: Yup.string().max(20, 'Must be 20 characters or less').required('Your City name is required*'),\r\n                    Country: Yup.string().required('Your Country name is required*').max(20, 'Must be 20 characters or less'),\r\n                    Name: Yup.string().max(15, 'Must be 15 characters or less').matches(/^[A-Za-z]+/, 'Use Alphabates only').required('Your Name is required*'),\r\n                    State: Yup.string().required('Your State name is required*').max(20, 'Must be 20 characters or less')\r\n                })\r\n            }\r\n            onSubmit={(values, { resetForm }) => {\r\n                if (props.title === 'Add') {\r\n                    submitValues(values);\r\n                    resetForm();\r\n                }\r\n                if (props.title === 'Update') {\r\n                    updatedValues(values);\r\n                    resetForm();\r\n                }\r\n            }}\r\n        >\r\n            {({ errors, touched }) => (\r\n                <Form>\r\n                    <div className=\"form-group\">\r\n                        <header className={classes.Header}>{props.header}</header>\r\n                        <div className='mt-5'>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col lg={6} md={6} sm={12} xs={12}>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Name\">Name</label>\r\n                                        <Field type=\"text\" name=\"Name\" placeholder=\"Name\" className={[`form-control ${errors.Name && touched.Name ? 'is-invalid' : ''}`, classes.Input].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"Name\" component=\"div\" className={[classes.ErrorMessage, 'invalid-feedback'].join(' ')} />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col lg={6} md={6} sm={12} xs={12}>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Age\">Age</label>\r\n                                        <Field type=\"number\" name=\"Age\" placeholder=\"Age\" className={[`form-control ${errors.Age && touched.Age ? 'is-invalid' : ''}`, classes.Input].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"Age\" component=\"div\" className={[classes.ErrorMessage, 'invalid-feedback'].join(' ')} />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col lg={6} md={6} sm={12} xs={12}>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"City\">City</label>\r\n                                        <Field type=\"text\" name=\"City\" placeholder=\"City\" className={[`form-control ${errors.City && touched.City ? 'is-invalid' : ''}`, classes.Input].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"City\" component=\"div\" className={[classes.ErrorMessage, 'invalid-feedback'].join(' ')} />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col lg={6} md={6} sm={12} xs={12}>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"State\">State</label>\r\n                                        <Field type=\"text\" name=\"State\" placeholder=\"State\" className={[`form-control ${errors.State && touched.State ? 'is-invalid' : ''}`, classes.Input].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"State\" component=\"div\" className={[classes.ErrorMessage, 'invalid-feedback'].join(' ')} />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col lg={6} md={6} sm={12} xs={12}>\r\n                                    <div className=\"form-group col\">\r\n                                        <label htmlFor=\"Country\">Country</label>\r\n                                        <Field type=\"text\" name=\"Country\" placeholder=\"Country\" className={[`form-control ${errors.Country && touched.Country ? 'is-invalid' : ''}`, classes.Input].join(' ')}></Field>\r\n                                        <ErrorMessage name=\"Country\" component=\"div\" className={[classes.ErrorMessage, 'invalid-feedback'].join(' ')} />\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                        <div className=\"form-group text-center mt-3\">\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                {\r\n                                    props.title === 'Update'\r\n                                        ? <div className=\"d-flex\">\r\n                                            <div className=\"mr-3\">\r\n                                                <button type=\"submit\" className={classes.Button}>UPDATE</button>\r\n                                            </div>\r\n                                            <div>\r\n                                                <button type=\"submit\" onClick={props.clicked} className={classes.Button}>CANCEL</button>\r\n                                            </div>\r\n                                        </div>\r\n                                        : <div className=\"d-flex\">\r\n                                            <div className=\"mr-3\">\r\n                                                <button type=\"submit\" className={classes.Button}>SUBMIT</button>\r\n                                            </div>\r\n                                            <div>\r\n                                                <button type=\"reset\" className={classes.Button}>RESET</button>\r\n                                            </div>\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            )\r\n            }\r\n        </Formik >\r\n    );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React, { Fragment } from 'react';\r\nimport { Table } from 'antd';\r\nimport classes from './List.module.css';\r\n\r\nconst List = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <header className={classes.Header}>{props.header}</header>\r\n            <div className='mt-5'>\r\n                <Table\r\n                    bordered\r\n                    columns={props.columns}\r\n                    dataSource={props.data}\r\n                    className={classes.Table}\r\n                    pagination={{ position: ['bottomCenter'] }}\r\n                />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default List;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Space, Popconfirm } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons'\r\nimport Col from 'react-bootstrap/Col';\r\nimport UserForm from '../Components/Form/UserForm';\r\nimport List from '../Components/List/List';\r\nimport Row from 'react-bootstrap/Row';\r\nimport classes from './Dashboard.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../Redux/Action/action';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: 'Id',\r\n                dataIndex: 'id',\r\n                key: 'id'\r\n            }, {\r\n                title: 'Name',\r\n                dataIndex: 'Name',\r\n                key: 'name'\r\n            }, {\r\n                title: 'Age',\r\n                dataIndex: 'Age',\r\n                key: 'age'\r\n            }, {\r\n                title: 'Country',\r\n                dataIndex: 'Country',\r\n                key: 'country'\r\n            }, {\r\n                title: 'Action',\r\n                key: 'action',\r\n                render: (text, record) => (\r\n                    <Space size=\"large\">\r\n                        <EditTwoTone key='update' onClick={() => this.props.onUpdateStart(record.id)} />\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.props.onConfirmDelete(record.id)}>\r\n                            <DeleteTwoTone />\r\n                        </Popconfirm>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Fragment>\r\n                <header className={classes.Header}>Dashboard</header>\r\n                <Row className={classes.Row}>\r\n                    <Col xs={12} sm={12} md={6} lg={6}>\r\n                        {\r\n                            this.props.update &&\r\n                            this.props.users.filter((data) => data.id === this.props.updateID).map((data) =>\r\n                                <UserForm\r\n                                    header='UPDATE USER'\r\n                                    key={data.id}\r\n                                    title={'Update'}\r\n                                    data={data}\r\n                                    onCreate={this.props.update ? this.props.onUpdateUser : this.props.onSubmitUsers}\r\n                                />\r\n                            )\r\n                        }\r\n                        {\r\n                            this.props.update === false &&\r\n                            <UserForm\r\n                                header='ADD NEW USER'\r\n                                title={'Add'}\r\n                                onCreate={this.props.update ? this.props.onUpdateUser : this.props.onSubmitUsers}\r\n                            />\r\n                        }\r\n                    </Col>\r\n                    <Col xs={12} sm={12} md={6} lg={6}>\r\n                        <List\r\n                            header='LIST OF ALL USERS'\r\n                            columns={columns}\r\n                            data={this.props.users}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStatetoProp = state => {\r\n    return {\r\n        users: state.users,\r\n        id: state.userID,\r\n        update: state.update,\r\n        updateID: state.updateID,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmitUsers: (data) => dispatch(actions.submitUser(data)),\r\n        onConfirmDelete: (id) => dispatch(actions.removeUser(id)),\r\n        onUpdateUser: (id, data) => dispatch(actions.updateUser(id, data)),\r\n        onUpdateStart: (id) => dispatch(actions.startUpdateUser(id)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProp, mapDispatchToProps)(Dashboard);\r\n","import * as actionTypes from '../Constant/actionTypes';\r\n\r\nexport function submitUser(data) {\r\n    return { payload: data, type: actionTypes.ADD_USER }\r\n}\r\n\r\nexport function removeUser(id) {\r\n    return { payload: id, type: actionTypes.REMOVE_USER }\r\n}\r\n\r\nexport function updateUser(id, data) {\r\n    return { id: id, data: data, type: actionTypes.UPDATE_USER }\r\n}\r\n\r\nexport function startUpdateUser(id) {\r\n    return { type: actionTypes.START_UPDATE, id: id }\r\n}\r\n","export const ADD_USER = 'ADD_USER';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const START_UPDATE = 'SET_UPDATE';\r\nexport const REMOVE_USER = 'REMOVE_USER';\r\n","import React, { Component } from 'react';\r\nimport Dashboard from './container/Dashboard';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dashboard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n","import * as actionTypes from '../Constant/actionTypes';\r\nimport { updateObject } from '../Utility/Utility';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    userID: Date.now().toString(36) + Math.random().toString(36).substr(2, 5).toUpperCase(),\r\n    update: false,\r\n    updateID: null\r\n}\r\n\r\nconst addUser = (state, action) => {\r\n    const newData = {\r\n        id: state.userID,\r\n        key: state.userID,\r\n        ...action.payload\r\n    };\r\n    const manipulatedState = [...state.users, newData]\r\n    return updateObject(state, {\r\n        users: manipulatedState,\r\n        userID: Date.now().toString(36) + Math.random().toString(36).substr(2, 5).toUpperCase()\r\n    });\r\n}\r\n\r\nconst removeUser = (state, action) => {\r\n    const dataSource = [...state.users];\r\n    return updateObject(state, {\r\n        users: dataSource.filter(item => item.key !== action.payload),\r\n    });\r\n}\r\n\r\nconst updateUser = (state, action) => {\r\n    const current = [...state.users];\r\n    const objIndex = state.users.findIndex((obj) => obj.id === action.id);\r\n    const updatedObj = { id: action.id, key: action.id, ...action.data };\r\n    const newUsers = Object.assign(\r\n        [],\r\n        current,\r\n        { [objIndex]: updatedObj }\r\n    );\r\n    return updateObject(state, {\r\n        users: newUsers,\r\n        update: false,\r\n        updateID: null\r\n    });\r\n}\r\n\r\nconst startUpdating = (state, action) => {\r\n    return updateObject(state, {\r\n        update: true,\r\n        updateID: action.id\r\n    });\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_USER: return addUser(state, action);\r\n        case actionTypes.REMOVE_USER: return removeUser(state, action);\r\n        case actionTypes.UPDATE_USER: return updateUser(state, action);\r\n        case actionTypes.START_UPDATE: return startUpdating(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from '../Reducer/reducer';\r\nconst store = createStore(rootReducer);\r\nexport default store;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './Redux/Store/store';\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"UserForm_Form__3Hne8\",\"Header\":\"UserForm_Header__3YPaK\",\"ErrorMessage\":\"UserForm_ErrorMessage__1s3yq\",\"Button\":\"UserForm_Button__3sDpr\",\"Input\":\"UserForm_Input__1wtHz\"};"],"sourceRoot":""}